Workqueue in Linux Kernel

Work queues are added in the Linux kernel 2.6 version. Work queues are a different form of deferring work. Work queues defer work into a kernel thread; this bottom half always runs in the process context.

Because workqueue allows users to create a kernel thread and bind work to the kernel thread.

So, this will run in the process context and the work queue can sleep.

    Code deferred to a work queue has all the usual benefits of process context.
    Most importantly, work queues are schedulable and can therefore sleep.

Normally, it is easy to decide between using workqueue and softirq/tasklet:

    If the deferred work needs to sleep, then workqueue is used.
    If the deferred work needs not sleep, then softirq or tasklet are used.

There are two ways to implement Workqueue in the Linux kernel.



Initialize work using the Static Method:

	The below call creates a workqueue by the name and the function that we are passing in the second argument gets scheduled in the queue.

		DECLARE_WORK(name, void (*func)(void *))

Where,

name: The name of the “work_struct” structure that has to be created.
func: The function to be scheduled in this workqueue.

Example:
		DECLARE_WORK(workqueue,workqueue_fn);

Schedule work to the Workqueue:

	The below functions are used to allocate the work to the queue.
Schedule_work:

	This function puts a job in the kernel-global workqueue if it was not already queued and leaves it in the same position on the kernel-global workqueue otherwise.

		int schedule_work( struct work_struct *work );

where,

work – job to be done

Returns zero if work was already on the kernel-global workqueue and non-zero otherwise.

There are methods like this:
		Scheduled_delayed_work
		Schedule_work_on
		Scheduled_delayed_work_on
		
	all methods have seperate api to work.



Delete work from workqueue:

	There are also a number of helper functions that you can use to flush or cancel work on work queues. To flush a particular work item and block until the work is complete, you can make a call to flush_work.

	All work on a given work queue can be completed using a call to flush_work. In both cases, the caller blocks until the operation is complete. To flush the kernel-global work queue, call flush_scheduled_work.
		int flush_work( struct work_struct *work );
		void flush_scheduled_work( void );



Cancel Work from workqueue:

	You can cancel work if it is not already executed in a handler. A call to cancel_work_sync will terminate the work in the queue or block until the callback has finished (if the work is already in progress in the handler).

	If the work is delayed, you can use a call to cancel_delayed_work_sync.
		int cancel_work_sync( struct work_struct *work );
		int cancel_delayed_work_sync( struct delayed_work *dwork );

Check the workqueue:

	Finally, you can find out whether a work item is pending (not yet executed by the handler) with a call to work_pending or delayed_work_pending.
		work_pending( work );
		delayed_work_pending( work );

